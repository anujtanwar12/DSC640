{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DSC640 - Week 3\n",
    "## Anuj Tanwar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These two weeks we are going to be focused on line charts and step charts using various tools to create these visualizations. You must consolidate all the charts into ONE document with each chart labeled with the type of chart and technology - for example: Python - Bar Chart.  Failure to label and consolidate the charts will resort in points being taken off or a 0 for the assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import csv\n",
    "#import xlrd\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'ex2-2/world-population.xlsm'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-15-b3875bc4750e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# Read world population data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mpopulation\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_excel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'ex2-2/world-population.xlsm'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpopulation\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python38\\site-packages\\pandas\\util\\_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    310\u001b[0m                 )\n\u001b[1;32m--> 311\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    312\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    313\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python38\\site-packages\\pandas\\io\\excel\\_base.py\u001b[0m in \u001b[0;36mread_excel\u001b[1;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, decimal, comment, skipfooter, convert_float, mangle_dupe_cols, storage_options)\u001b[0m\n\u001b[0;32m    455\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mio\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    456\u001b[0m         \u001b[0mshould_close\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 457\u001b[1;33m         \u001b[0mio\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mio\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    458\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0mengine\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mengine\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mio\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    459\u001b[0m         raise ValueError(\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python38\\site-packages\\pandas\\io\\excel\\_base.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, path_or_buffer, engine, storage_options)\u001b[0m\n\u001b[0;32m   1374\u001b[0m                 \u001b[0mext\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"xls\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1375\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1376\u001b[1;33m                 ext = inspect_excel_format(\n\u001b[0m\u001b[0;32m   1377\u001b[0m                     \u001b[0mcontent_or_path\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mpath_or_buffer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1378\u001b[0m                 )\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python38\\site-packages\\pandas\\io\\excel\\_base.py\u001b[0m in \u001b[0;36minspect_excel_format\u001b[1;34m(content_or_path, storage_options)\u001b[0m\n\u001b[0;32m   1248\u001b[0m         \u001b[0mcontent_or_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcontent_or_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1249\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1250\u001b[1;33m     with get_handle(\n\u001b[0m\u001b[0;32m   1251\u001b[0m         \u001b[0mcontent_or_path\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"rb\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mis_text\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1252\u001b[0m     ) as handle:\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python38\\site-packages\\pandas\\io\\common.py\u001b[0m in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    793\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    794\u001b[0m             \u001b[1;31m# Binary mode\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 795\u001b[1;33m             \u001b[0mhandle\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mioargs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    796\u001b[0m         \u001b[0mhandles\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    797\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'ex2-2/world-population.xlsm'"
     ]
    }
   ],
   "source": [
    "# Read world population data\n",
    "population = pd.read_excel('ex2-2/world-population.xlsm',0)\n",
    "print(population.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### World Population data\n",
    "#### Line and Step graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = population['Year']\n",
    "Y = population['Population']\n",
    "plt.plot(X, Y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.step(X, Y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### AEP Data\n",
    "#### Line and Step graph\n",
    "For the AEP data, there are too many observations to put in a line plot. Hence I calculated the total of AEP_MW for each year and plotted them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Total_MW</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2004</td>\n",
       "      <td>33479854.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2005</td>\n",
       "      <td>138752914.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>137826610.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2007</td>\n",
       "      <td>145781458.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2008</td>\n",
       "      <td>145224910.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year     Total_MW\n",
       "0  2004   33479854.0\n",
       "1  2005  138752914.0\n",
       "2  2006  137826610.0\n",
       "3  2007  145781458.0\n",
       "4  2008  145224910.0"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert pandas column to datetime\n",
    "aep['Datetime'] = pd.to_datetime(aep['Datetime'])\n",
    "\n",
    "# Extract Year and store in a new column\n",
    "aep['Year'] = aep['Datetime'].dt.year\n",
    "\n",
    "# Calculate sum of MW for each year\n",
    "aep_aggr = aep.groupby(['Year'])['AEP_MW'].agg('sum').reset_index(name='Total_MW')\n",
    "aep_aggr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = aep_aggr['Year']\n",
    "Y = aep_aggr['Total_MW']\n",
    "plt.plot(X, Y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.step(X, Y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sample Superstore data\n",
    "#### Line and Step graph\n",
    "For this data set, I plan to plot the profit by order year and segment. This needs some additional data preparation as below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order Year</th>\n",
       "      <th>Total Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014</td>\n",
       "      <td>49543.9741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>61618.6037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016</td>\n",
       "      <td>81795.1743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017</td>\n",
       "      <td>93439.2696</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order Year  Total Profit\n",
       "0        2014    49543.9741\n",
       "1        2015    61618.6037\n",
       "2        2016    81795.1743\n",
       "3        2017    93439.2696"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract order year\n",
    "superstore['Order Year'] = superstore['Order Date'].dt.year\n",
    "\n",
    "# Calculate total profit for each segment each year\n",
    "superstore_aggr = superstore.groupby(['Order Year'])['Profit'].agg('sum').reset_index(name='Total Profit')\n",
    "\n",
    "# Check data\n",
    "superstore_aggr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = superstore_aggr['Order Year']\n",
    "Y = superstore_aggr['Total Profit']\n",
    "plt.plot(X, Y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYcAAAD8CAYAAACcjGjIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvIxREBQAAExhJREFUeJzt3X+s3fV93/Hna7i0kMWxAUMdG+ZEs5I6aCHGI6bZUFZvxrAWs7VIRJpwI1qnGd2aTdVENWmWyKI107RurB0TCzRmKwmUNrXXQV2PRvsLXAxx+JnWTprABQfcmGBatCRs7/1xPk6O/DnX9/j6Xh9f83xIR9/v+Xw/38/5vPle87rf7/mee1JVSJI07K9MegKSpNOP4SBJ6hgOkqSO4SBJ6hgOkqSO4SBJ6hgOkqSO4SBJ6hgOkqTOoklPYLYuuOCCWrVq1aSnIUkLxuOPP/7nVbVsnL4LNhxWrVrF3r17Jz0NSVowknxj3L5eVpIkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdRbs5xwkza979zzPjn0vTnoaOsaady5m20+9b95fxzMHSSPt2Pcizx48MulpaEI8c5A0rTXLF3Pfx66c9DQ0AZ45SJI6hoMkqWM4SJI6hoMkqWM4SJI6hoMkqWM4SJI6hoMkqWM4SJI6hoMkqTNWOCT5pSRPJ3kmySda23lJdifZ35ZLW3uS3J7kQJInk6wdGmdL678/yZah9suTPNX2uT1J5rpQSdL4ZgyHJJcCPw9cAbwf+Mkkq4FbgYerajXwcHsOcA2wuj22Ane0cc4DtgEfbGNtOxoorc/Wof02zUVxkqTZGefM4ceAR6vqjap6E/jfwD8ANgPbW5/twPVtfTNwTw08CixJshy4GthdVYer6lVgN7CpbVtcVY9UVQH3DI0lSZqAccLhaeCqJOcnORe4FrgYuKiqDgK05YWt/wrghaH9p1rb8dqnRrRLkiZkxj/ZXVXPJfk0g9/0/wL4MvDmcXYZ9X5BzaK9HzjZyuDyE5dccslxpiBJOhljvSFdVXdV1dqqugo4DOwHXm6XhGjLV1r3KQZnFketBF6aoX3liPZR87izqtZV1bply5aNM3VJ0iyMe7fShW15CfAPgc8BO4GjdxxtAXa09Z3ATe2upfXAa+2y0y5gY5Kl7Y3ojcCutu31JOvbXUo3DY0lSZqAcb8J7neSnA98D7ilql5N8qvA/UluBp4Hbmh9H2TwvsQB4A3gowBVdTjJJ4HHWr/bqupwW/848FngHOCh9pAkTchY4VBVf3tE27eADSPaC7hlmnHuBu4e0b4XuHScuUiS5p+fkJYkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdQwHSVLHcJAkdRZNegLSvXueZ8e+Fyc9DR3j2YNHWLN88aSnoQnxzEETt2Pfizx78Mikp6FjrFm+mM2XrZj0NDQhnjnotLBm+WLu+9iVk56GpMYzB0lSx3CQJHXGCock/yzJM0meTvK5JD+S5F1J9iTZn+S+JGe3vj/cnh9o21cNjfMrrf1Pklw91L6ptR1IcutcFylJOjEzhkOSFcA/BdZV1aXAWcCNwKeBX6uq1cCrwM1tl5uBV6vqrwO/1vqRZE3b733AJuA/JzkryVnAbwDXAGuAj7S+kqQJGfey0iLgnCSLgHOBg8BPAA+07duB69v65vactn1DkrT2z1fVd6rqz4ADwBXtcaCqvlZV3wU+3/pKkiZkxnCoqheBfwc8zyAUXgMeB75dVW+2blPA0XveVgAvtH3fbP3PH24/Zp/p2iVJEzLOZaWlDH6TfxfwTuBtDC4BHauO7jLNthNtHzWXrUn2Jtl76NChmaYuSZqlcS4r/V3gz6rqUFV9D/hd4MeBJe0yE8BK4KW2PgVcDNC2vwM4PNx+zD7TtXeq6s6qWldV65YtWzbG1CVJszFOODwPrE9ybnvvYAPwLPBF4Gdany3Ajra+sz2nbf+jqqrWfmO7m+ldwGrgj4HHgNXt7qezGbxpvfPkS5MkzdaMn5Cuqj1JHgCeAN4EvgTcCfxP4PNJ/nVru6vtchfw35IcYHDGcGMb55kk9zMIljeBW6rq/wIk+UVgF4M7oe6uqmfmrkRJ0oka689nVNU2YNsxzV9jcKfRsX3/D3DDNON8CvjUiPYHgQfHmYskaf75CWlJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1DAdJUsdwkCR1ZgyHJO9Jsm/ocSTJJ5Kcl2R3kv1tubT1T5LbkxxI8mSStUNjbWn99yfZMtR+eZKn2j63J8n8lCtJGseM4VBVf1JVl1XVZcDlwBvAF4BbgYerajXwcHsOcA2wuj22AncAJDkP2AZ8ELgC2HY0UFqfrUP7bZqT6iRJs3Kil5U2AF+tqm8Am4HtrX07cH1b3wzcUwOPAkuSLAeuBnZX1eGqehXYDWxq2xZX1SNVVcA9Q2NJkibgRMPhRuBzbf2iqjoI0JYXtvYVwAtD+0y1tuO1T41olyRNyNjhkORs4Drgt2fqOqKtZtE+ag5bk+xNsvfQoUMzTEOSNFsncuZwDfBEVb3cnr/cLgnRlq+09ing4qH9VgIvzdC+ckR7p6rurKp1VbVu2bJlJzB1SdKJOJFw+Ag/uKQEsBM4esfRFmDHUPtN7a6l9cBr7bLTLmBjkqXtjeiNwK627fUk69tdSjcNjSVJmoBF43RKci7w94CPDTX/KnB/kpuB54EbWvuDwLXAAQZ3Nn0UoKoOJ/kk8Fjrd1tVHW7rHwc+C5wDPNQekqQJGSscquoN4Pxj2r7F4O6lY/sWcMs049wN3D2ifS9w6ThzkSTNPz8hLUnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpI7hIEnqGA6SpM6iSU/gVLt3z/Ps2PfipKehIc8ePMKa5YsnPQ1JQ95yZw479r3IswePTHoaGrJm+WI2X7Zi0tOQNOQtd+YAg/8Z3fexKyc9DUk6bb3lzhwkSTMbKxySLEnyQJKvJHkuyZVJzkuyO8n+tlza+ibJ7UkOJHkyydqhcba0/vuTbBlqvzzJU22f25Nk7kuVJI1r3DOH/wj8QVW9F3g/8BxwK/BwVa0GHm7PAa4BVrfHVuAOgCTnAduADwJXANuOBkrrs3Vov00nV5Yk6WTMGA5JFgNXAXcBVNV3q+rbwGZge+u2Hbi+rW8G7qmBR4ElSZYDVwO7q+pwVb0K7AY2tW2Lq+qRqirgnqGxJEkTMM6Zw7uBQ8BvJvlSks8keRtwUVUdBGjLC1v/FcALQ/tPtbbjtU+NaJckTcg44bAIWAvcUVUfAP6SH1xCGmXU+wU1i/Z+4GRrkr1J9h46dOj4s5Ykzdo44TAFTFXVnvb8AQZh8XK7JERbvjLU/+Kh/VcCL83QvnJEe6eq7qyqdVW1btmyZWNMXZI0GzOGQ1V9E3ghyXta0wbgWWAncPSOoy3Ajra+E7ip3bW0HnitXXbaBWxMsrS9Eb0R2NW2vZ5kfbtL6aahsSRJEzDuh+D+CfBbSc4GvgZ8lEGw3J/kZuB54IbW90HgWuAA8EbrS1UdTvJJ4LHW77aqOtzWPw58FjgHeKg9JEkTMlY4VNU+YN2ITRtG9C3glmnGuRu4e0T7XuDSceYiSZp/fkJaktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJHcNBktQxHCRJnbHCIcnXkzyVZF+Sva3tvCS7k+xvy6WtPUluT3IgyZNJ1g6Ns6X1359ky1D75W38A23fzHWhkqTxnciZw9+pqsuqal17fivwcFWtBh5uzwGuAVa3x1bgDhiECbAN+CBwBbDtaKC0PluH9ts064okSSftZC4rbQa2t/XtwPVD7ffUwKPAkiTLgauB3VV1uKpeBXYDm9q2xVX1SFUVcM/QWJKkCRg3HAr4wySPJ9na2i6qqoMAbXlha18BvDC071RrO1771Ih2SdKELBqz34eq6qUkFwK7k3zlOH1HvV9Qs2jvBx4E01aASy655PgzliTN2lhnDlX1Ulu+AnyBwXsGL7dLQrTlK637FHDx0O4rgZdmaF85on3UPO6sqnVVtW7ZsmXjTF2SNAszhkOStyV5+9F1YCPwNLATOHrH0RZgR1vfCdzU7lpaD7zWLjvtAjYmWdreiN4I7GrbXk+yvt2ldNPQWHNuzTsXs+adi+dreEk6I4xzWeki4Avt7tJFwL1V9QdJHgPuT3Iz8DxwQ+v/IHAtcAB4A/goQFUdTvJJ4LHW77aqOtzWPw58FjgHeKg95sW2n3rffA0tSWeMDG4QWnjWrVtXe/funfQ0JGnBSPL40McRjstPSEuSOoaDJKljOEiSOoaDJKljOEiSOoaDJKljOEiSOgv2cw5JDgHfmOXuFwB/PofTmaQzpZYzpQ6wltPRmVIHnFwtf62qxvrbQws2HE5Gkr3jfhDkdHem1HKm1AHWcjo6U+qAU1eLl5UkSR3DQZLUeauGw52TnsAcOlNqOVPqAGs5HZ0pdcApquUt+Z6DJOn43qpnDpKk41hw4ZDk4iRfTPJckmeS/FJrPy/J7iT723Jpa39vkkeSfCfJL48Y76wkX0ry+9O83g8nuS/JgSR7kqxawLX8bJJDSfa1x8+djrUk+XqSp9ocR/5d9vZlUre34/JkkrULtI4PJ3lt6Jj8q7moYx5qWZLkgSRfaeNdOeL15uWYTKiWeTkuc1VHkvcMzW1fkiNJPjHi9WZ/TKpqQT2A5cDatv524E+BNcC/BW5t7bcCn27rFwJ/E/gU8MsjxvvnwL3A70/zev8Y+C9t/UbgvgVcy88Cv366Hxfg68AFM7zetQy+FCrAemDPAq3jw9Mdr9Oslu3Az7X1s4Elp+qYTKiWeTkuc1nH0JhnAd9k8BmGOTsmC+7MoaoOVtUTbf114DlgBbCZwUGnLa9vfV6pqseA7x07VpKVwN8HPnOclxwe9wFgQzL4WryTNYFa5s1c1jKmzcA9NfAosCTtO81PxgTqmDdzVUuSxcBVwF2t33er6tsjXnJejsmEapkX8/TztQH4alWN+lDwrI/JgguHYRlc4vkAsAe4qAbfR01bXjjGEP8B+BfA/ztOnxXAC23cN4HXgPNnPelpnKJaAH66nV4+kOTi2c94enNQSwF/mOTxJFun6fP949JMtbY5c4rqALgyyZeTPJRkXr7H9iRreTdwCPjNDC5bfiaD75M/1rwfEzhltcA8H5c5+Pk66kbgc9Nsm/UxWbDhkOSvAr8DfKKqjsxi/58EXqmqx2fqOqJtTm/xOoW1/A9gVVX9DeB/8YPfVObMydbSfKiq1gLXALckuWrUS41om7PjcgrreILB5YD3A/8J+L1Zvta05qCWRcBa4I6q+gDwlwwufXQvNaLttPq3wvi1zOtxmaOfL5KcDVwH/PZ0XUa0jXVMFmQ4JPkhBv9hf6uqfrc1v3z0dKktX5lhmA8B1yX5OvB54CeS/PcR/aaAi9u4i4B3AIdPuojmVNZSVd+qqu+0p/8VuHwOSvi+OaqFqnqpLV8BvgBcMaLb949LsxJ4afaz/4FTWUdVHamqv2jrDwI/lOSCuaijzXUuapkCpqpqT3v+AIP/wY7qNy/HBE5tLfN5XObq56u5Bniiql6eZvusj8mCC4d2vf8u4Lmq+vdDm3YCW9r6FmDH8capql+pqpVVtYrBadkfVdU/GtF1eNyfaf3m5LehU13LMdcar2NwvXNOzFUtSd6W5O1H14GNwNMjuu4Ebmp3Y6wHXjt6Wn4yTnUdSX706HtYSa5g8G/yWydbRxtvrn6+vgm8kOQ9rWkD8OyIrvNyTODU1zJfx2Wu6hjyEaa/pHR03Nkdk5qHuyTm8wH8LQanRU8C+9rjWgbvAzwM7G/L81r/H2WQnkeAb7f1xceM+WGG7kwAbgOua+s/wuCU7QDwx8C7F3At/wZ4Bvgy8EXgvadbLQyuCX+5PZ4B/uXQa/wC8AttPcBvAF8FngLWLdA6fnHomDwK/PjpdkzatsuAvW2s3wOWnqpjMqFa5uW4zHEd5zIIrHcc8xpzckz8hLQkqbPgLitJkuaf4SBJ6hgOkqSO4SBJ6hgOkqSO4SBJ6hgOkqSO4SBJ6vx/z+S7bsda5NIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.step(X, Y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
